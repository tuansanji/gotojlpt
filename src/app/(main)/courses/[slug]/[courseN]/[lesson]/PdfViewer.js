"use client";

import React, { useState, useMemo } from "react";
import { Document, Page, pdfjs } from "react-pdf";
import "react-pdf/dist/Page/AnnotationLayer.css";
import "react-pdf/dist/Page/TextLayer.css";

// T·ª± host file Worker ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ·ªïn ƒë·ªãnh
if (typeof window !== "undefined") {
  pdfjs.GlobalWorkerOptions.workerSrc = `/pdf.worker.min.js`;

  const originalWarn = console.warn;
  console.warn = function (...args) {
    // L·ªçc c·∫£nh b√°o v·ªÅ cache
    if (
      typeof args[0] === "string" &&
      args[0].includes("GlobalImageCache.setData")
    ) {
      return;
    }
    // L·ªçc c·∫£nh b√°o v·ªÅ knockout groups
    if (
      typeof args[0] === "string" &&
      args[0].includes("Knockout groups not supported")
    ) {
      return;
    }
    // Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c c·∫£nh b√°o kh√°c
    originalWarn.apply(console, args);
  };
}

// ----------------------------------------------------
// H√ÄM TI·ªÜN √çCH: CHU·∫®N H√ìA ƒê·∫¶U V√ÄO TH√ÄNH M·∫¢NG C√ÅC OBJECT PDF
// ----------------------------------------------------
const normalizePdfUrls = (pdfUrl) => {
  const API_URL_BASE = "https://api.gotojlpt.com/pdf/";
  let urlsToRender = [];
  let processedUrl = pdfUrl; // Bi·∫øn t·∫°m ƒë·ªÉ gi·ªØ d·ªØ li·ªáu ƒë√£ ph√¢n t√≠ch

  // üåü B∆Ø·ªöC S·ª¨A L·ªñI: Th·ª≠ ph√¢n t√≠ch chu·ªói JSON th√†nh m·∫£ng n·∫øu n√≥ c√≥ v·∫ª l√† m·∫£ng
  // ƒêi·ªÅu n√†y r·∫•t quan tr·ªçng n·∫øu pdfUrl ƒë∆∞·ª£c truy·ªÅn v√†o d∆∞·ªõi d·∫°ng m·ªôt chu·ªói JSON.
  if (typeof pdfUrl === "string" && pdfUrl.trim().startsWith("[")) {
    try {
      // Th·ª≠ parse chu·ªói th√†nh m·∫£ng
      processedUrl = JSON.parse(pdfUrl);
    } catch (e) {
      console.error("Failed to parse pdfUrl as JSON Array:", e);
      // Gi·ªØ nguy√™n chu·ªói n·∫øu parse th·∫•t b·∫°i
      processedUrl = pdfUrl;
    }
  }

  // TR∆Ø·ªúNG H·ª¢P 1: ƒê·∫ßu v√†o l√† M·∫¢NG (ho·∫∑c ƒë√£ ƒë∆∞·ª£c parse th√†nh m·∫£ng)
  if (Array.isArray(processedUrl)) {
    urlsToRender = processedUrl
      .filter((item) => item && item.path && item.type === "pdf") // Ch·ªâ l·∫•y c√°c m·ª•c l√† pdf
      .map((item) => {
        // T·∫°o URL ƒë·∫ßy ƒë·ªß
        const url = item.path.startsWith("http")
          ? item.path
          : `${API_URL_BASE}${item.path}`;
        return {
          url: encodeURI(url), // M√£ h√≥a URL
          path: item.path,
        };
      });
  }
  // TR∆Ø·ªúNG H·ª¢P 2: ƒê·∫ßu v√†o l√† CHU·ªñI (URL ƒë∆°n)
  else if (typeof processedUrl === "string" && processedUrl) {
    let fullUrl = processedUrl;
    // N·∫øu chu·ªói l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, th√™m API_URL_BASE
    if (!processedUrl.startsWith("http")) {
      fullUrl = `${API_URL_BASE}${processedUrl}`;
    }
    // T·∫°o m·∫£ng ch·ªâ v·ªõi 1 ph·∫ßn t·ª≠
    urlsToRender = [{ url: encodeURI(fullUrl), path: processedUrl }];
  }

  return urlsToRender;
};
// ----------------------------------------------------

export default function PdfViewer({ pdfUrl }) {
  const [loadingError, setLoadingError] = useState(null);

  // üåü T√çNH TO√ÅN SCALE T·ªêI ∆ØU cho ƒë·ªô s·∫Øc n√©t (Gi·ªØ nguy√™n)
  const devicePixelRatio =
    typeof window !== "undefined" ? window.devicePixelRatio || 1 : 1;
  // S·ª≠ d·ª•ng 1.5 ho·∫∑c devicePixelRatio * 0.75 ƒë·ªÉ tƒÉng c∆∞·ªùng ƒë·ªô n√©t
  const customScale = devicePixelRatio > 1 ? devicePixelRatio * 0.75 : 1.5;

  // üåü S·ª¨ D·ª§NG useMemo ƒë·ªÉ t√≠nh to√°n M·∫¢NG C√ÅC URL C·∫¶N RENDER
  const pdfFiles = useMemo(() => normalizePdfUrls(pdfUrl), [pdfUrl]);

  // State ƒë·ªÉ theo d√µi s·ªë trang c·ªßa t·ª´ng file
  const [numPagesMap, setNumPagesMap] = useState({});

  function onDocumentLoadSuccess(index, { numPages }) {
    setNumPagesMap((prev) => ({ ...prev, [index]: numPages }));
    setLoadingError(null);
  }

  function onDocumentLoadError(error) {
    console.error("Error loading PDF:", error);
    // C·∫£nh b√°o ng∆∞·ªùi d√πng v·ªÅ l·ªói CORS
    setLoadingError(
      "Kh√¥ng th·ªÉ t·∫£i t√†i li·ªáu PDF. Vui l√≤ng ki·ªÉm tra console. (L·ªói c√≥ th·ªÉ do CORS)."
    );
  }

  // ------------------------------------
  // PH·∫¶N LOGIC RENDER
  // ------------------------------------

  if (pdfFiles.length === 0) {
    return (
      <div className="p-4 text-center text-gray-500">
        Kh√¥ng c√≥ t√†i li·ªáu PDF n√†o ƒë∆∞·ª£c cung c·∫•p ho·∫∑c ƒë∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá.
      </div>
    );
  }

  if (loadingError) {
    return (
      <div className="p-4 text-center text-red-600 font-bold bg-red-100 rounded-lg border border-red-300">
        {loadingError}
      </div>
    );
  }

  return (
    <div
      className="pdf-display-area w-full mt-4 flex flex-col items-center overflow-y-auto"
      style={{ maxHeight: "calc(100vh - 200px)" }}
    >
      {/* L·∫∂P QUA M·∫¢NG C√ÅC FILE V√Ä RENDER M·ªñI FILE TRONG M·ªòT <Document> RI√äNG */}
      {pdfFiles.map((file, fileIndex) => (
        <div key={fileIndex} className="w-full flex flex-col items-center mb-8">
          <a
            href={`https://api.gotojlpt.com/pdf-download/${encodeURI(
              file.path
            )}`}
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center justify-center space-x-2 px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition duration-300 mb-4"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L10 11.586l1.293-1.293a1 1 0 111.414 1.414l-2 2a1 1 0 01-1.414 0l-2-2a1 1 0 010-1.414z"
                clipRule="evenodd"
              />
              <path
                fillRule="evenodd"
                d="M10 2a1 1 0 011 1v7a1 1 0 11-2 0V3a1 1 0 011-1z"
                clipRule="evenodd"
              />
            </svg>
            <span>T·∫£i xu·ªëng T√†i li·ªáu {fileIndex + 1}</span>
          </a>

          <Document
            file={file.url}
            onLoadSuccess={(data) => onDocumentLoadSuccess(fileIndex, data)}
            onLoadError={onDocumentLoadError}
            loading={
              <div className="p-4 text-center text-blue-600">
                ƒêang t·∫£i t√†i li·ªáu {fileIndex + 1}...
              </div>
            }
            error={
              <div className="p-4 text-center text-red-600">
                L·ªói khi t·∫£i PDF #{fileIndex + 1}.
              </div>
            }
            noData={
              <div className="p-4 text-center text-gray-500">
                Kh√¥ng c√≥ d·ªØ li·ªáu PDF #{fileIndex + 1}.
              </div>
            }
          >
            {/* L·∫∑p qua s·ªë trang c·ªßa file hi·ªán t·∫°i */}
            {Array.from(new Array(numPagesMap[fileIndex]), (_, pageIndex) => (
              <div
                key={`file_${fileIndex}_page_${pageIndex + 1}`}
                className="my-2 border border-gray-200 shadow-sm rounded-md overflow-hidden"
              >
                <Page
                  pageNumber={pageIndex + 1}
                  renderTextLayer={false}
                  renderAnnotationLayer={false}
                  width={650} // Chi·ªÅu r·ªông c·ªë ƒë·ªãnh
                  scale={customScale} // TƒÉng c∆∞·ªùng ƒë·ªô n√©t
                />
              </div>
            ))}
          </Document>
        </div>
      ))}
    </div>
  );
}
